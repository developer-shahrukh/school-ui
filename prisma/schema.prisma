
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin{
  id String @id
  username String @unique
}

model Student{
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  bloodType String
  sex UserSex
  createAt DateTime @default(now())  
  parentId String
  parent Parent @relation(fields:[parentId],refrences:  [id])
  classId String
  class Class @relation(fields:[classId],refrences:  [id])
  gradeId String
  grade Grade @relation(fields:[gradeId],refrences:  [id])
  attendances Attendance[]
  results Result[]
}

model Teacher{
id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  bloodType String
  sex UserSex
  createAt DateTime @default(now())  
  subject Subject[]
  lessons Lesson[]
  classes Class[]
}

model Parent{
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String @unique
  address String
  createAt DateTime @default(now())  
  student Student[]
}

model Grade{
  id Int @id @default(autoincrement())
  level Int
  student Student[]
  class Class[]
}

model Class{
  id Int @id default(autoincrement())
  name String @unique
  capacity Int

  supervisorId String
  supervisor Teacher
  supervisor Teacher @relation(fields: [supervisorId],refrences:  [id])
  lessons Lesson[]  
  student Student[]
  gradeId String
  grade Grade @relation(fields:[gradeId],refrences:  [id])
  events Event[]
  announcements Announcement[]
}

model Subject{
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

model Lesson{
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime DateTime
  endTime EndTime
  subjectId Int
  subject Subject @relation(fields: [subjectId],refrences: [id])
  classId Int
  class Class @relation(fields: [classId],refrences: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId],refrences: [id])
  exams Exam[]
  assignements Assignment[]
  attendances Attendance[]
}
model Exam{
    id Int @id @default(autoincrement())
    title String
    startTime DateTime
    endTime DateTime
    lessonId Int
    lessons Lesson @relation(fields: [lessonId],refrences [id])
    results Result[]
}

model Assignment{
    id Int @id @default(autoincrement())
    title String
    startDate DateTime
    dueDate DateTime
    lessonId Int
    lessons Lesson @relation(fields: [lessonId],refrences [id])
    results Result[]
}

model Result{
  id Int @id @default(autoincrement())
  score Int
  examId Int?
  exam Exam? @relation(fields: [examId],refrences [id])
  assignmentId Int?
  assignement Assignment? @relation(fields: [assignmentId],refrences [id])
  studentId String
  student Student @relation(fields: [studentId],refrences [id])
  
}

model Attendance{
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean

  studentId String
  student Student @relation(fields: [studentId],refrences [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId],refrences [id])
}

model Event{
id Int @id @default(autoincrement())
title String
description String
startTime DateTime
endTime DateTime
classId Int?
class Class? @relation(fields:[classId],refrences:  [id])
}

model Announcement{
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime
  classId Int?
class Class? @relation(fields:[classId],refrences:  [id])
}

enum UserSex{
  Male 
  Female
}

enum Day{
  Monday
  Tuesday
  Wednesday
  Thusday
  Friday
}